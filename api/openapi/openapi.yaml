openapi: 3.0.0
info:
  title: User Phones and Manager API
  version: 1.0.0
tags:
  - name: UserPhones
    description: Operations for managing user phones
  - name: Managers
    description: Operations for managing managers and their login activities
paths:
  /user_phones:
    get:
      tags:
        - UserPhones
      summary: Retrieve all user phones
      description: Здесь нужно передать все данные о пользователях
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of user phones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPhone'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    post:
      tags:
        - UserPhones
      summary: Create a new user phone
      description: Передаю данные, чтобы создать пользователя в базе данных. Заранее говорю, что нужно проверять номера телефонов на их существование. На frontend я буду проверять их на валидность, поэтому они будут приходить в красивой форме
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                date_of_send:
                  type: string
                  format: date-time
                information_about_user:
                  type: string
              required:
                - user_phone_id
                - name
                - phone
                - date_of_send
      responses:
        '201':
          description: User phone created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error
    put:
      tags:
        - UserPhones
      summary: Update multiple user phones
      description: Обновление данных нескольких пользователей. Поле `id` передается в каждом объекте массива.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  phone:
                    type: string
                  date_of_send:
                    type: string
                    format: date-time
                  information_about_user:
                    type: string
                required:
                  - id
                  - name
                  - phone
                  - date_of_send
      responses:
        '200':
          description: User phones updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /user_phones/{id}:
    delete:
      tags:
        - UserPhones
      summary: Delete a specific user phone by ID
      description: В таблице у менеджера можно удалить пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User phone deleted successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /managers:
    get:
      tags:
        - Managers
      summary: Retrieve all managers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of managers
          content:
            application/json:
              schema:
                type: object
                properties:
                  manager_id:
                    type: integer
                  manager_name:
                    type: string
                  date_of_login:
                    type: string
                    format: date-time
                  device:
                    type: string
                  ip_address:
                    type: string
                required:
                  - date_of_login
                  - device
                  - ip_address
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /managers/logins:
    post:
      tags:
        - Managers
      summary: Log a manager login
      description: Здесь нужно проверить менеджера (это вход в систему), нужно сохранить с какого устройства и в какое время был совершен вход. Также нужно будет прислать на почту (потом обсудим это) сообщение, что в какое-то время и с какого-то устройства был совершен вход
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
                date_of_login:
                  type: string
                  format: date-time
                device:
                  type: string
                ip_address:
                  type: string
              required:
                - date_of_login
                - device
                - ip_address
                - login
                - password

      responses:
        '201':
          description: Manager login recorded successfully, JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Bad request
        '500':
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserPhone:
      type: object
      properties:
        user_phone_id:
          type: integer
        name:
          type: string
        phone:
          type: string
        date_of_send:
          type: string
          format: date-time
        information_about_user:
          type: string
      required:
        - user_phone_id
        - name
        - phone
        - date_of_send
    Manager:
      type: object
      properties:
        manager_id:
          type: integer
        manager_name:
          type: string
        login:
          type: string
        password:
          type: string
        LoginHistory:
          type: array
          items:
            $ref: '#/components/schemas/LoginHistory'
      required:
        - manager_id
        - manager_name
        - login
        - password
    LoginHistory:
      type: object
      properties:
        date_of_login:
          type: string
          format: date-time
        device:
          type: string
        ip_address:
          type: string
        failed_login_attempts:
          type: integer
        active_tokens:
          type: string
      required:
        - date_of_login
        - device
        - ip_address
        - failed_login_attempts
        - active_tokens
